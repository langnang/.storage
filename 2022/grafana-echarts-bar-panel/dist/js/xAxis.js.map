{"version":3,"sources":["../../src/js/xAxis.js"],"names":["xAxis","options","data","type","format","column","show","splitLine","lineStyle","opacity","axisLabel","_data","_options","$init","$formatter","$data","index","columns","map","v","text","indexOf","rows","formatter","split","join","toString","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAqBA,iB;AACjB,+BAAYC,OAAZ,EAAqBC,IAArB,EAA2B;AAAA;;AACvB,yBAAKC,IAAL,GAAYF,QAAQE,IAAR,IAAgB,UAA5B;AACA,yBAAKC,MAAL,GAAcH,QAAQG,MAAR,IAAkB,aAAhC;AACA,yBAAKC,MAAL,GAAcJ,QAAQI,MAAR,IAAkB,EAAhC;AACA,yBAAKC,IAAL,GAAYL,QAAQK,IAAR,IAAgB,IAA5B;AACA,yBAAKC,SAAL,GAAiBN,QAAQM,SAAR,IAAqB;AAClCD,8BAAM,IAD4B;AAElCE,mCAAW;AACPL,kCAAM,OADC;AAEPM,qCAAS;AAFF;AAFuB,qBAAtC;AAOA,yBAAKP,IAAL,GAAY,EAAZ;AACA,yBAAKQ,SAAL,GAAiB,EAAjB;AACA,yBAAKC,KAAL,GAAaT,IAAb;AACA,yBAAKU,QAAL,GAAgBX,OAAhB;AACA,yBAAKY,KAAL;AACH;;;;4CACO;AACJ,6BAAKC,UAAL;AACA,6BAAKC,KAAL;AACH;;;8CACS,CAAG;;;4CACL;AACJ,4BAAIC,QAAQ,KAAKL,KAAL,CAAW,CAAX,EAAcM,OAAd,CAAsBC,GAAtB,CAA0B;AAAA,mCAAKC,EAAEC,IAAP;AAAA,yBAA1B,EAAuCC,OAAvC,CAA+C,KAAKhB,MAApD,CAAZ;AACAW,gCAAQA,QAAQ,CAAC,CAAT,GAAaA,KAAb,GAAqB,CAA7B;AACA;AACA;AACA;AACA,6BAAKd,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcW,IAAd,CAAmBJ,GAAnB,CAAuB;AAAA,mCAAKC,EAAEH,KAAF,CAAL;AAAA,yBAAvB,CAAZ;AACA;AACH;;;iDACY;AACT;AACA,4BAAI,KAAKJ,QAAL,CAAcW,SAAd,IAA2B,YAA/B,EAA6C;AACzC,iCAAKb,SAAL,CAAea,SAAf,GAA2B,UAAUJ,CAAV,EAAa;AAAE,uCAAOA,CAAP;AAAW,6BAArD;AACH,yBAFD,MAEO,IAAI,KAAKP,QAAL,CAAcW,SAAd,IAA2B,UAA/B,EAA2C;AAC9C,iCAAKb,SAAL,CAAea,SAAf,GAA2B,UAAUJ,CAAV,EAAa;AAAE,uCAAOA,EAAEK,KAAF,CAAQ,EAAR,EAAYC,IAAZ,CAAiB,IAAjB,CAAP;AAAgC,6BAA1E;AACH;AACD;AACH;;;4CACO,CAAG;;;8CACD,CAAG;;;0CACPC,Q,EAAU;AACZ;AACA,4BAAIA,QAAJ,EAAc;AACV,mCAAOC,KAAKC,SAAL,CAAe,IAAf,CAAP;AACH;AACD,+BAAO,IAAP;AACH;;;;;;+BAlDgB5B,K","file":"xAxis.js","sourcesContent":["export default class xAxis {\r\n    constructor(options, data) {\r\n        this.type = options.type || 'category';\r\n        this.format = options.format || 'YYYY--MM-DD';\r\n        this.column = options.column || '';\r\n        this.show = options.show || true;\r\n        this.splitLine = options.splitLine || {\r\n            show: true,\r\n            lineStyle: {\r\n                type: \"solid\",\r\n                opacity: 0.3\r\n            }\r\n        };\r\n        this.data = [];\r\n        this.axisLabel = {};\r\n        this._data = data;\r\n        this._options = options;\r\n        this.$init();\r\n    }\r\n    $init() {\r\n        this.$formatter();\r\n        this.$data();\r\n    }\r\n    $column() { }\r\n    $data() {\r\n        let index = this._data[0].columns.map(v => v.text).indexOf(this.column);\r\n        index = index > -1 ? index : 0;\r\n        // console.log(this.column);\r\n        // console.log(this._data[0].columns.map(v => v.text));\r\n        // console.log(index);\r\n        this.data = this._data[0].rows.map(v => v[index]);\r\n        // console.log(this.data);\r\n    }\r\n    $formatter() {\r\n        // console.log(this._options.formatter);\r\n        if (this._options.formatter == 'horizontal') {\r\n            this.axisLabel.formatter = function (v) { return v; };\r\n        } else if (this._options.formatter == 'vertical') {\r\n            this.axisLabel.formatter = function (v) { return v.split(\"\").join(\"\\n\"); };\r\n        }\r\n        // console.log(this.axisLabel.formatter);\r\n    }\r\n    $type() { }\r\n    $format() { }\r\n    print(toString) {\r\n        // console.log(this);\r\n        if (toString) {\r\n            return JSON.stringify(this);\r\n        }\r\n        return this;\r\n    }\r\n}"]}